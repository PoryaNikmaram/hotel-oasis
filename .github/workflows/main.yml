# This is the name of your workflow that appears in GitHub Actions tab
name: CI/CD Pipeline

# When should this workflow run?
on:
  # Trigger on push to main branch
  push:
    branches: [main, develop]

  # Trigger on pull requests to main branch
  pull_request:
    branches: [main]

  # Allow manual trigger from GitHub UI
  workflow_dispatch:

# Define environment variables that all jobs can use
env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1
  NODE_ENV: production
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

# Jobs are the main building blocks of your workflow
jobs:
  # JOB 1: Code Quality Check
  quality-check:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get the code from your repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Cache dependencies for faster builds
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci --prefer-offline --no-audit
          # Install sharp for Next.js image optimization
          npm install sharp

      - name: Install Husky
        run: npx husky install

      # Step 4: Run ESLint
      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          npm run lint:check
        env:
          # Environment variables needed for linting
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # Step 5: Check Prettier formatting
      - name: Check Code Formatting
        run: |
          echo "‚ú® Checking code formatting..."
          npm run format:check

      # Step 8: Security audit
      - name: Security Audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level high
        continue-on-error: true

  # JOB 2: Build Test
  build-test:
    name: Build Application
    runs-on: ubuntu-latest
    # This job depends on quality-check job
    needs: quality-check

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          # Install sharp for production image optimization
          npm install sharp

      - name: Install Husky
        run: npx husky install

      # Step: Build the Next.js application
      - name: Build Application
        run: |
          echo "üèóÔ∏è Building Next.js application..."
          npm run build
        env:
          # Production environment
          NODE_ENV: production
          # Supabase configuration
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # Step: Upload build artifacts for other jobs to use
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

      # Step: Cache build for faster subsequent runs
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # JOB 3: Deployment (only runs on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Only run this job if:
    # 1. Previous jobs passed
    # 2. We're on the main branch
    # 3. It's not a pull request
    needs: [quality-check, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    # Deployment environment (creates deployment in GitHub)
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Download the build artifacts from build-test job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit --omit=dev

      - name: Install Husky
        run: npx husky install

      # Example deployment to Vercel
      # You'll need to add VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID to GitHub secrets
      - name: Deploy to Vercel
        id: deploy
        run: |
          echo "üöÄ Deploying to production..."
          # npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
          echo "url=https://your-app.vercel.app" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment successful!"
        env:
          # Production environment variables
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      # Send notification on successful deployment
      - name: Deployment Notification
        if: success()
        run: |
          echo "üéâ Successfully deployed to production!"
          echo "URL: ${{ steps.deploy.outputs.url }}"

  # JOB 4: PR Preview (only for pull requests)
  preview-deploy:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: [quality-check, build-test]
    # Only run for pull requests
    if: github.event_name == 'pull_request'

    environment:
      name: preview

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy Preview
        run: |
          echo "üîç Deploying preview for PR #${{ github.event.number }}..."
          # npx vercel --token ${{ secrets.VERCEL_TOKEN }}
          echo "‚úÖ Preview deployment ready!"

      # Comment on PR with preview link
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Preview Deployment Ready!
              
              Your changes have been deployed to a preview environment.
              
              **Preview URL:** https://preview-${{ github.event.number }}.vercel.app
              
              **Changes in this PR:**
              - All quality checks passed ‚úÖ
              - Build completed successfully ‚úÖ
              - Ready for review üëÄ`
            });
            console.log('Comment created:', comment.html_url);
